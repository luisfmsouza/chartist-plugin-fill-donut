{"version":3,"sources":["chartist-plugin-fill-donut.js"],"names":["root","factory","define","amd","exports","module","require","Chartist","this","document","defaultOptions","fillClass","label","html","class","items","plugins","fillDonut","options","extend","chart","Pie","$chart","container","style","position","$svg","drawDonut","data","type","index","querySelector","$clone","group","_node","cloneNode","split","forEach","className","setAttribute","getAttribute","call","querySelectorAll","el","node","parentNode","removeChild","removeAttribute","insertBefore","childNodes","on","itemIndex","fillDonutOptions","thisItem","$wrapper","createElement","classList","add","item","id","content","offsetY","offsetX","length","insertAdjacentHTML","appendChild","cWidth","Math","ceil","offsetWidth","cHeight","clientHeight","wWidth","wHeight","bottom","left","top","right","center"],"mappings":"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","file":"chartist-plugin-fill-donut.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['chartist'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('chartist'));\n  } else {\n    root['Chartist.plugins.fillDonut'] = factory(root.Chartist);\n  }\n}(this, function(Chartist) {\n/**\n * Chartist.js plugin to pre fill donuts with animations\n * author: moxx\n * author-url: https://github.com/moxx/chartist-plugin-fill-donut\n *\n */\n(function (document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n        fillClass: 'ct-fill-donut',\n        label: {\n            html: 'div',\n            class: 'ct-fill-donut-label'\n        },\n        items: [{}]\n    };\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.fillDonut = function (options) {\n        options = Chartist.extend({}, defaultOptions, options);\n        return function fillDonut(chart) {\n            if (chart instanceof Chartist.Pie) {\n                var $chart = chart.container;\n                $chart.style.position = 'relative';\n                var $svg;\n\n                var drawDonut = function(data) {\n                    if (data.type === 'slice') {\n                        if (data.index === 0) {\n                            $svg = $chart.querySelector('svg');\n                        }\n\n                        var $clone = data.group._node.cloneNode(true);\n                        options.fillClass.split(\" \").forEach(function (className) {\n                            $clone.setAttribute('class', $clone.getAttribute('class') + ' ' + className);\n                        });\n\n                        [].forEach.call($clone.querySelectorAll('path'), function (el) {\n                            [].forEach.call(el.querySelectorAll('animate'), function (node) {\n                                node.parentNode.removeChild(node);\n                            });\n\n                            el.removeAttribute('stroke-dashoffset');\n                        });\n\n                        $svg.insertBefore($clone, $svg.childNodes[0]);\n\n                    }\n                };\n\n                chart.on('draw', function (data) {\n                    drawDonut(data);\n                });\n\n                chart.on('created', function (data) {\n                    var itemIndex = 0;\n\n                    if (chart.options.fillDonutOptions) {\n                        options = Chartist.extend({}, options, chart.options.fillDonutOptions);\n                        drawDonut(data);\n                    }\n\n                    [].forEach.call(options.items, function (thisItem) {\n                        var $wrapper = document.createElement(options.label.html);\n                        options.label.class.split(\" \").forEach(function (className) {\n                            if ($wrapper.classList) {\n                                $wrapper.classList.add(className);\n                            } else {\n                                $wrapper.className += ' ' + className;\n                            }\n                        });\n                        var item = Chartist.extend({}, {\n                            class: '',\n                            id: '',\n                            content: 'fillText',\n                            position: 'center', //bottom, top, left, right\n                            offsetY: 0, //top, bottom in px\n                            offsetX: 0 //left, right in px\n                        }, thisItem);\n\n\n                        if (item.id.length > 0) {\n                            $wrapper.setAttribute('id', item.id);\n                        }\n                        if (item.class.length > 0) {\n                            $wrapper.setAttribute('class', item.class);\n                        }\n\n                        [].forEach.call($chart.querySelectorAll('*[data-fill-index$=\"fdid-' + itemIndex + '\"]'), function (node) {\n                            node.parentNode.removeChild(node);\n                        });\n                        $wrapper.setAttribute('data-fill-index', 'fdid-' + itemIndex);\n                        itemIndex += 1;\n\n                        $wrapper.insertAdjacentHTML('beforeend', item.content);\n                        $wrapper.style.position = 'absolute';\n                        $chart.appendChild($wrapper);\n\n                        var cWidth = Math.ceil($chart.offsetWidth / 2);\n                        var cHeight = Math.ceil($chart.clientHeight / 2);\n                        var wWidth = Math.ceil($wrapper.offsetWidth / 2);\n                        var wHeight = Math.ceil($wrapper.clientHeight / 2);\n\n                        var style = {\n                            bottom: {\n                                bottom: 0 + item.offsetY + \"px\",\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\n                            },\n                            top: {\n                                top: 0 + item.offsetY + \"px\",\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\n                            },\n                            left: {\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\n                                left: 0 + item.offsetX + \"px\"\n                            },\n                            right: {\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\n                                right: 0 + item.offsetX + \"px\"\n                            },\n                            center: {\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\n                            }\n                        };\n\n                        Chartist.extend($wrapper.style, style[item.position]);\n                    });\n                });\n            }\n        };\n    };\n}(document, Chartist)); // jshint ignore:line\n\nreturn Chartist.plugins.fillDonut;\n}));\n"]}